//If several waiting Threads have same priority the we can't excpect or predict 
to which thread will get chnace to start executing.



class MyThread1 extends Thread{
	@Override
	public void run() {
		// TODO Auto-generated method stub
		System.out.println("Started "+Thread.currentThread());
		Thread.yield();
		
		System.out.println("Ended "+Thread.currentThread());
	}
}


public class yield_preventExecution {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		MyThread1 t1 = new MyThread1();
		MyThread1 t2 = new MyThread1();
		
		
		t1.start();
		t2.start();
		
	}

}

o/p:-
Started Thread[Thread-1,5,main]
Started Thread[Thread-0,5,main]
Ended Thread[Thread-1,5,main]          // thread-1 start first and after yield() its ends first
Ended Thread[Thread-0,5,main]

o/p:-
Started Thread[Thread-0,5,main]
Started Thread[Thread-1,5,main]      // Thread-2 start first and after yield() it ends last
Ended Thread[Thread-1,5,main]
Ended Thread[Thread-0,5,main]


Here, we create two threads, t1 and t2, that execute the run() method in YieldDemo Class.
As we can observe from the output, thread t1 start executing first. When the yield() method is invoked, thread t1 goes to the Ready state from the Running state, and thread t2 starts executing.
Then t2 goes in Ready state because yield() is called on it.
Now, thread t1 resumes its execution and terminates. The execution of the second thread follows this because it was in a Ready state.
